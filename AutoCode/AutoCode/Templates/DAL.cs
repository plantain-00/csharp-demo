// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 10.0.0.0
//  
//     对此文件的更改可能会导致不正确的行为。此外，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AutoCode.Templates
{
    using System.Xml.Serialization;
    using System.IO;
    using System.Collections.Generic;
    using DataSource;
    using System;
    
    
    #line 1 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class DAL : DALBase
    {
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
        public virtual string TransformText()
        {
            this.GenerationEnvironment = null;
            
            #line 9 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"

var tmp = new XmlSerializer(typeof(Software))
                             .Deserialize(
                                 new FileStream("Last.xml",
                                                FileMode.Open,
                                                FileAccess.ReadWrite,
                                                FileShare.ReadWrite)) as Software;
foreach (var database in tmp.Databases)
{
    var name = "DataSourceRepository." + database.Name + "DataSource";
    var dataSource = name + ".DataSource";
    foreach (var table in database.Tables)
    {

            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Collections.Object" +
                    "Model;\r\nusing System.Data;\r\nusing System.Data.SQLite;\r\nusing System.Linq;\r\nusing" +
                    " System.Text;\r\nusing ");
            
            #line 30 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tmp.ModelNameSpace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 30 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(database.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\nnamespace ");
            
            #line 32 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tmp.DALNameSpace));
            
            #line default
            #line hidden
            this.Write(".Services.");
            
            #line 32 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(database.Name));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public static class DAL");
            
            #line 34 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(@"Service
    {
        /// <summary>
        /// 增加多条数据
        /// </summary>
        /// <param name=""model"">不需要指定ID</param>
        /// <returns>插入的数据的ID</returns>
        /// <exception cref=""SQLiteException""></exception>
        /// <exception cref=""ArgumentNullException""></exception>
        public static List<int> AddList(IList<Model");
            
            #line 43 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(@"> model)
        {
            if (model == null)
            {
                throw new ArgumentNullException(""model"");
            }

            if (!model.Any())
            {
                return new List<int>();
            }

            var strSqlList = new Collection<string>();
            var parametersList = new Collection<SQLiteParameter[]>();
            foreach (var tableModel in model)
            {
                var strSql = new StringBuilder();
                strSql.Append(""insert into ");
            
            #line 60 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("(\");\r\n                                strSql.Append(\"");
            
            #line 61 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
for (int i = 1; i < table.Columns.Count; i++)
{
            
            #line default
            #line hidden
            
            #line 62 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Columns[i].Name));
            
            #line default
            #line hidden
            
            #line 62 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
if (i != table.Columns.Count - 1)
    {
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 63 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
}
    }
            
            #line default
            #line hidden
            this.Write(")\");\r\n                strSql.Append(\" values (\");\r\n                              " +
                    "  strSql.Append(\"");
            
            #line 66 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
for (int i = 1; i < table.Columns.Count; i++)
       {
            
            #line default
            #line hidden
            this.Write("@");
            
            #line 67 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Columns[i].Name));
            
            #line default
            #line hidden
            
            #line 67 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
if (i != table.Columns.Count - 1)
    {
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 68 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
}
}
            
            #line default
            #line hidden
            this.Write(")\");\r\n                strSql.Append(\";select LAST_INSERT_ROWID()\");\r\n            " +
                    "    var parameters = new[]\r\n                    {\r\n                            ");
            
            #line 73 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
for (int i = 1; i < table.Columns.Count; i++)
{
            
            #line default
            #line hidden
            this.Write("new SQLiteParameter(\"@");
            
            #line 74 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Columns[i].Name));
            
            #line default
            #line hidden
            this.Write("\", DbType.");
            
            #line 74 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Columns[i].Type.ToString()));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 74 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
if (i != table.Columns.Count - 1)
    {
            
            #line default
            #line hidden
            this.Write(",\r\n                            ");
            
            #line 76 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
}
}
            
            #line default
            #line hidden
            this.Write("                \r\n                    };\r\n                ");
            
            #line 80 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
for (int i = 1; i < table.Columns.Count; i++)
{
            
            #line default
            #line hidden
            this.Write("parameters[");
            
            #line 81 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i - 1));
            
            #line default
            #line hidden
            this.Write("].Value = tableModel.");
            
            #line 81 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Columns[i].Name));
            
            #line default
            #line hidden
            this.Write(";\r\n                ");
            
            #line 82 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n                strSqlList.Add(strSql.ToString());\r\n                parametersL" +
                    "ist.Add(parameters);\r\n            }\r\n\r\n            var obj = DbHelperSQLite.GetS" +
                    "ingle(DataSourceRepository.");
            
            #line 88 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(database.Name));
            
            #line default
            #line hidden
            this.Write(@"DataSource.DataSource, strSqlList, parametersList);
            return obj.Select(o => o == null ? 0 : Convert.ToInt32(o)).ToList();
        }

        /// <summary>
        /// 删除多条数据
        /// </summary>
        /// <param name=""idList"">待删除的数据的ID的列表，以“,”分割</param>
        /// <returns>true表示删除成功</returns>
        /// <exception cref=""SQLiteException""></exception>
        /// <exception cref=""ArgumentNullException""></exception>
        public static bool DeleteList(string idList)
        {
            if (idList == null)
            {
                throw new ArgumentNullException(""idList"");
            }

            if (idList.Length == 0)
            {
                return true;
            }

            var strSql = new StringBuilder();
            strSql.Append(""delete from ");
            
            #line 112 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(" \");\r\n            strSql.Append(\" where ");
            
            #line 113 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Columns[0].Name));
            
            #line default
            #line hidden
            this.Write(" in (\" + idList + \")  \");\r\n            return DbHelperSQLite.ExecuteSql(");
            
            #line 114 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataSource));
            
            #line default
            #line hidden
            this.Write(@", strSql.ToString()) > 0;
        }

        /// <summary>
        /// 更新多条数据
        /// </summary>
        /// <param name=""modelList"">待更新的数据需要指定ID</param>
        /// <returns>true表示更新成功</returns>
        /// <exception cref=""SQLiteException""></exception>
        /// <exception cref=""ArgumentNullException""></exception>
        public static bool UpdateList(IList<Model");
            
            #line 124 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(@"> modelList)
        {
            if (modelList == null)
            {
                throw new ArgumentNullException(""modelList"");
            }

            if (!modelList.Any())
            {
                return true;
            }

            var strSqlList = new Collection<string>();
            var parametersList = new Collection<SQLiteParameter[]>();
            foreach (var model in modelList)
            {
                var strSql = new StringBuilder();
                strSql.Append(""update ");
            
            #line 141 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(" set \");\r\n                ");
            
            #line 142 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
for (int i = 1; i < table.Columns.Count; i++)
{
            
            #line default
            #line hidden
            this.Write("strSql.Append(\"");
            
            #line 143 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Columns[i].Name));
            
            #line default
            #line hidden
            this.Write("=@");
            
            #line 143 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Columns[i].Name));
            
            #line default
            #line hidden
            
            #line 143 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
if (i != table.Columns.Count - 1)
{
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 144 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
}
            
            #line default
            #line hidden
            this.Write("\");\r\n                ");
            
            #line 145 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
}
            
            #line default
            #line hidden
            this.Write("            \r\n                strSql.Append(\" where ");
            
            #line 147 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Columns[0].Name));
            
            #line default
            #line hidden
            this.Write("=@");
            
            #line 147 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Columns[0].Name));
            
            #line default
            #line hidden
            this.Write("\");\r\n                var parameters = new[]\r\n                    {\r\n             " +
                    "           ");
            
            #line 150 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
for (int i = 0; i < table.Columns.Count; i++)
{
            
            #line default
            #line hidden
            this.Write("new SQLiteParameter(\"@");
            
            #line 151 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Columns[i].Name));
            
            #line default
            #line hidden
            this.Write("\", DbType.");
            
            #line 151 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Columns[i].Type.ToString()));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 151 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
if (i != table.Columns.Count - 1)
{
            
            #line default
            #line hidden
            this.Write(",\r\n                        ");
            
            #line 153 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
}
}
            
            #line default
            #line hidden
            this.Write("\r\n                    };\r\n                ");
            
            #line 157 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
for (int i = 0; i < table.Columns.Count; i++)
{
            
            #line default
            #line hidden
            this.Write("parameters[");
            
            #line 158 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write("].Value = model.");
            
            #line 158 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Columns[i].Name));
            
            #line default
            #line hidden
            this.Write(";\r\n                ");
            
            #line 159 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n                strSqlList.Add(strSql.ToString());\r\n                parametersL" +
                    "ist.Add(parameters);\r\n            }\r\n\r\n            return DbHelperSQLite.Execute" +
                    "SqlList(");
            
            #line 165 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataSource));
            
            #line default
            #line hidden
            this.Write(@", strSqlList, parametersList) > 0;
        }

        /// <summary>
        /// 获得符合指定条件的数据列表
        /// </summary>
        /// <param name=""strWhere"">指定的条件，不需要包括“where”，当为null或string.Empty时表中所有数据列表</param>
        /// <returns></returns>
        /// <exception cref=""SQLiteException""></exception>
        internal static List<Model");
            
            #line 174 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(@"> GetModelList(string strWhere)
        {
            return DataTableToList(GetList(strWhere).Tables[0]);
        }

        /// <summary>
        /// 获得符合指定条件的分页数据列表
        /// </summary>
        /// <param name=""strWhere"">指定的条件，不需要包括“where”，当为null或string.Empty时表中所有数据列表</param>
        /// <param name=""strOrderby"">排序字段，不需要包括“order by”,当为null或string.empty是为默认排序</param>
        /// <param name=""limit"">所取的记录数</param>
        /// <param name=""offset"">跳过的记录数</param>
        /// <returns></returns>
        /// <exception cref=""SQLiteException""></exception>
        /// <exception cref=""ArgumentException""></exception>
		internal static List<Model");
            
            #line 189 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(@"> GetModelList(string strWhere, string strOrderby, int limit, int offset)
        {
            if (limit < 0)
            {
                throw new ArgumentException(""Is Negative."", ""limit"");
            }

            if (offset < 0)
            {
                throw new ArgumentException(""Is Negative."", ""offset"");
            }

            return DataTableToList(GetList(strWhere, strOrderby, limit, offset).Tables[0]);
        }

        /// <summary>
        /// 比较并更新数据，对于增加了的数据，插入数据库；对于删除了的数据，从数据库中删除；对于修改了的数据，更新至数据库中。
        /// </summary>
        /// <param name=""oldModels"">旧数据列表，刚从数据查找出来的数据列表</param>
        /// <param name=""newModels"">新数据列表，结果程序增加、删除或修改之后的数据列表</param>
        /// <returns></returns>
        /// <exception cref=""SQLiteException""></exception>
        /// <exception cref=""ArgumentNullException""></exception>
        internal static bool SaveChanges(IList<Model");
            
            #line 212 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("> oldModels, IList<Model");
            
            #line 212 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("> newModels)\r\n        {\r\n            if (oldModels == null)\r\n            {\r\n     " +
                    "           throw new ArgumentNullException(\"oldModels\");\r\n            }\r\n\r\n     " +
                    "       if (newModels == null)\r\n            {\r\n                throw new Argument" +
                    "NullException(\"newModels\");\r\n            }\r\n\r\n            if (!oldModels.Any() &" +
                    "& !newModels.Any())\r\n            {\r\n                return true;\r\n            }\r" +
                    "\n\r\n            var addedModels = newModels.Where(m => m.ID == 0).ToList();\r\n    " +
                    "        var oldModelIds = oldModels.Select(m => m.ID).ToList();\r\n            var" +
                    " newModelIds = newModels.Select(m => m.ID);\r\n            var deletedIds = oldMod" +
                    "elIds.Where(i => !newModelIds.Contains(i)).ToList();\r\n            var b = newMod" +
                    "els.Select(model => new { model, index = oldModelIds.IndexOf(model.ID) });\r\n    " +
                    "        var updatedModels = b.Where(m => m.index >= 0)\r\n                        " +
                    "                  .Where(m => oldModels[m.index].NotEquals(m.model))\r\n          " +
                    "                                .Select(m => m.model).ToList();\r\n            var" +
                    " addedIDs = AddList(addedModels);\r\n            for (var i = 0; i < addedModels.C" +
                    "ount && i < addedIDs.Count; i++)\r\n            {\r\n                addedModels[i]." +
                    "ID = addedIDs[i];\r\n            }\r\n\r\n            var ids = deletedIds.Aggregate(s" +
                    "tring.Empty, (s, d) => s + \",\" + d).Trim(\',\');\r\n            return (ids.Length =" +
                    "= 0 || DeleteList(ids)) \r\n                && (updatedModels.Count == 0 || Update" +
                    "List(updatedModels));\r\n        }\r\n\r\n        /// <param name=\"strWhere\"></param>\r" +
                    "\n        /// <returns></returns>\r\n        /// <exception cref=\"SQLiteException\">" +
                    "</exception>\r\n        private static DataSet GetList(string strWhere)\r\n        {" +
                    "\r\n            var strSql = new StringBuilder();\r\n            strSql.Append(\"sele" +
                    "ct * \");\r\n            strSql.Append(\" FROM ");
            
            #line 255 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(" \");\r\n            if (strWhere != null && strWhere.Trim().Length != 0)\r\n         " +
                    "   {\r\n                strSql.Append(\" where \" + strWhere);\r\n            }\r\n\r\n   " +
                    "         return DbHelperSQLite.Query(");
            
            #line 261 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataSource));
            
            #line default
            #line hidden
            this.Write(@", strSql.ToString());
        }

        /// <exception cref=""SQLiteException""></exception>
        /// <exception cref=""ArgumentException""></exception>
        private static DataSet GetList(string strWhere, string strOrderby, int limit, int offset)
        {
            if (limit < 0)
            {
                throw new ArgumentException(""Is Negative."", ""limit"");
            }

            if (offset < 0)
            {
                throw new ArgumentException(""Is Negative."", ""offset"");
            }

            var strSql = new StringBuilder();
            strSql.Append(""select * "");
            strSql.Append("" FROM ");
            
            #line 280 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(@" "");
            if (strWhere != null && strWhere.Trim().Length != 0)
            {
                strSql.Append("" where "" + strWhere);
            }

            if (strOrderby != null && strOrderby.Trim().Length != 0)
            {
                strSql.Append("" order by "" + strOrderby);
            }

            strSql.Append("" limit "" + limit);
            strSql.Append("" offset "" + offset + "";"");
            return DbHelperSQLite.Query(");
            
            #line 293 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataSource));
            
            #line default
            #line hidden
            this.Write(", strSql.ToString());\r\n        }\r\n\r\n        /// <exception cref=\"ArgumentNullExce" +
                    "ption\"></exception>\r\n        /// <exception cref=\"ArgumentException\"></exception" +
                    ">\r\n        private static List<Model");
            
            #line 298 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(@"> DataTableToList(DataTable dt)
        {
            if (dt == null)
            {
                throw new ArgumentNullException(""dt"");
            }

            if (dt.Rows == null)
            {
                throw new ArgumentException(""Rows are Null."", ""dt"");
            }

            var modelList = new List<Model");
            
            #line 310 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(@">();
            for (var n = 0; n < dt.Rows.Count; n++)
            {
                var model = DataRowToModel(dt.Rows[n]);
                modelList.Add(model);
            }

            return modelList;
        }

        /// <exception cref=""ArgumentNullException""></exception>
        private static Model");
            
            #line 321 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(" DataRowToModel(DataRow row)\r\n        {\r\n            if (row == null)\r\n          " +
                    "  {\r\n                throw new ArgumentNullException(\"row\");\r\n            }\r\n\r\n " +
                    "           var model = new Model");
            
            #line 328 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("();\r\n");
            
            #line 329 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
foreach (var column in table.Columns)
{
    var isString = column.Type.ToString() == "String";
    var isBool = column.Type.ToString() == "Boolean";
            
            #line default
            #line hidden
            this.Write("            if (row[\"");
            
            #line 333 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            this.Write("\"] != null");
            
            #line 333 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
if (!isString){
            
            #line default
            #line hidden
            this.Write(" && row[\"");
            
            #line 333 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            this.Write("\"].ToString().Length != 0");
            
            #line 333 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
}
            
            #line default
            #line hidden
            this.Write(")\r\n            {\r\n");
            
            #line 335 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"

    if (!isBool)
    {

            
            #line default
            #line hidden
            this.Write("                model.");
            
            #line 339 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 339 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
if (!isString)
{
            
            #line default
            #line hidden
            
            #line 340 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Type.ToString()));
            
            #line default
            #line hidden
            this.Write(".Parse(");
            
            #line 340 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
}
            
            #line default
            #line hidden
            this.Write("row[\"");
            
            #line 340 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            this.Write("\"].ToString()");
            
            #line 340 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
if (!isString)
{
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 341 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
}
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 342 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"

    }
    else
    {

            
            #line default
            #line hidden
            this.Write("                model.");
            
            #line 347 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            this.Write(" = Convert.ToBoolean(Convert.ToInt32(row[\"");
            
            #line 347 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            this.Write("\"]));\r\n");
            
            #line 348 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"

    }

            
            #line default
            #line hidden
            this.Write("            }\r\n\r\n");
            
            #line 353 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"

}

            
            #line default
            #line hidden
            this.Write("            return model;\r\n        }\r\n        private static bool NotEquals(this " +
                    "Model");
            
            #line 358 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(" model1,\r\n                                       Model");
            
            #line 359 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(@" model2)
        {
            if (model1 == null && model2 == null)
            {
                return true;
            }

            if (model1 == null || model2 == null)
            {
                return false;
            }

            return ");
            
            #line 371 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"

for (int i = 0; i < table.Columns.Count; i++)
{
    var column = table.Columns[i];

            
            #line default
            #line hidden
            this.Write("model1.");
            
            #line 375 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            this.Write(" != model2.");
            
            #line 375 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            
            #line 375 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"

if (i != table.Columns.Count - 1)
{

            
            #line default
            #line hidden
            this.Write(" || ");
            
            #line 378 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"

}
}

            
            #line default
            #line hidden
            this.Write(";\r\n        }\r\n    }\r\n}DALRemark20130426");
            
            #line 384 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DAL.tt"
}
}
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class DALBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
    }
    #endregion
}
