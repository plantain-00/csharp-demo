// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 10.0.0.0
//  
//     对此文件的更改可能会导致不正确的行为。此外，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AutoCode.Templates
{
    using System.Xml.Serialization;
    using System.IO;
    using System.Collections.Generic;
    using DataSource;
    using System;
    
    
    #line 1 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DbHelperSQLite.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class DbHelperSQLite : DbHelperSQLiteBase
    {
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
        public virtual string TransformText()
        {
            this.GenerationEnvironment = null;
            
            #line 9 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DbHelperSQLite.tt"

var tmp = new XmlSerializer(typeof(Software))
                             .Deserialize(
                                 new FileStream("Last.xml",
                                                FileMode.Open,
                                                FileAccess.ReadWrite,
                                                FileShare.ReadWrite)) as Software;

            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Collections.Object" +
                    "Model;\r\nusing System.Data;\r\nusing System.Data.SQLite;\r\n\r\nnamespace ");
            
            #line 23 "D:\SVN\AutoCode2\trunk\AutoCode\Templates\DbHelperSQLite.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tmp.DALNameSpace));
            
            #line default
            #line hidden
            this.Write(".Services\r\n{\r\n    internal static class DbHelperSQLite\r\n    {\r\n        /// <excep" +
                    "tion cref=\"SQLiteException\"></exception>\r\n        /// <exception cref=\"ArgumentN" +
                    "ullException\"></exception>\r\n        /// <exception cref=\"ArgumentException\"></ex" +
                    "ception>\r\n        internal static int ExecuteSql(string dataSource, string sqlSt" +
                    "ring, params SQLiteParameter[] cmdParms)\r\n        {\r\n            if (dataSource " +
                    "== null)\r\n            {\r\n                throw new ArgumentNullException(\"dataSo" +
                    "urce\");\r\n            }\r\n\r\n            if (sqlString == null)\r\n            {\r\n   " +
                    "             throw new ArgumentNullException(\"sqlString\");\r\n            }\r\n\r\n   " +
                    "         if (dataSource.Length == 0)\r\n            {\r\n                throw new A" +
                    "rgumentException(\"Empty String.\", \"dataSource\");\r\n            }\r\n\r\n            i" +
                    "f (sqlString.Length == 0)\r\n            {\r\n                throw new ArgumentExce" +
                    "ption(\"Empty String.\", \"sqlString\");\r\n            }\r\n\r\n            using (var co" +
                    "nnection = new SQLiteConnection(dataSource))\r\n            {\r\n                usi" +
                    "ng (var cmd = new SQLiteCommand())\r\n                {\r\n                    if (c" +
                    "onnection.State != ConnectionState.Open)\r\n                    {\r\n               " +
                    "         connection.Open();\r\n                    }\r\n\r\n                    cmd.Co" +
                    "nnection = connection;\r\n                    cmd.CommandText = sqlString;\r\n      " +
                    "              cmd.CommandType = CommandType.Text;\r\n                    if (cmdPa" +
                    "rms != null)\r\n                    {\r\n                        foreach (var parm i" +
                    "n cmdParms)\r\n                        {\r\n                            cmd.Paramete" +
                    "rs.Add(parm);\r\n                        }\r\n                    }\r\n\r\n             " +
                    "       var rows = cmd.ExecuteNonQuery();\r\n                    cmd.Parameters.Cle" +
                    "ar();\r\n                    return rows;\r\n                }\r\n            }\r\n     " +
                    "   }\r\n\r\n        /// <exception cref=\"SQLiteException\"></exception>\r\n        /// " +
                    "<exception cref=\"ArgumentNullException\"></exception>\r\n        /// <exception cre" +
                    "f=\"ArgumentException\"></exception>\r\n        internal static int ExecuteSqlList(s" +
                    "tring dataSource, IList<string> sqlString, IList<SQLiteParameter[]> cmdParms)\r\n " +
                    "       {\r\n            if (dataSource == null)\r\n            {\r\n                th" +
                    "row new ArgumentNullException(\"dataSource\");\r\n            }\r\n\r\n            if (s" +
                    "qlString == null)\r\n            {\r\n                throw new ArgumentNullExceptio" +
                    "n(\"sqlString\");\r\n            }\r\n\r\n            if (cmdParms == null)\r\n           " +
                    " {\r\n                throw new ArgumentNullException(\"cmdParms\");\r\n            }\r" +
                    "\n\r\n            if (dataSource.Length == 0)\r\n            {\r\n                throw" +
                    " new ArgumentException(\"Empty String.\", \"dataSource\");\r\n            }\r\n\r\n       " +
                    "     if (sqlString.Count == 0)\r\n            {\r\n                throw new Argumen" +
                    "tException(\"Empty Collection.\", \"sqlString\");\r\n            }\r\n\r\n            if (" +
                    "cmdParms.Count == 0)\r\n            {\r\n                throw new ArgumentException" +
                    "(\"Empty Collection.\", \"cmdParms\");\r\n            }\r\n\r\n            var result = 0;" +
                    "\r\n            using (var connection = new SQLiteConnection(dataSource))\r\n       " +
                    "     {\r\n                if (connection.State != ConnectionState.Open)\r\n         " +
                    "       {\r\n                    connection.Open();\r\n                }\r\n\r\n         " +
                    "       using (var transaction = connection.BeginTransaction())\r\n                " +
                    "{\r\n                    using (var cmd = new SQLiteCommand())\r\n                  " +
                    "  {\r\n                        cmd.Connection = connection;\r\n                     " +
                    "   try\r\n                        {\r\n                            for (var i = 0; i" +
                    " < cmdParms.Count; i++)\r\n                            {\r\n                        " +
                    "        cmd.CommandText = sqlString[i];\r\n                                cmd.Tra" +
                    "nsaction = transaction;\r\n                                cmd.CommandType = Comma" +
                    "ndType.Text;\r\n                                if (cmdParms[i] != null)\r\n        " +
                    "                        {\r\n                                    foreach (var parm" +
                    " in cmdParms[i])\r\n                                    {\r\n                       " +
                    "                 cmd.Parameters.Add(parm);\r\n                                    " +
                    "}\r\n                                }\r\n\r\n                                var rows" +
                    " = cmd.ExecuteNonQuery();\r\n                                cmd.Parameters.Clear(" +
                    ");\r\n                                result += rows;\r\n                           " +
                    " }\r\n\r\n                            transaction.Commit();\r\n                       " +
                    "     return result;\r\n                        }\r\n                        catch\r\n " +
                    "                       {\r\n                            transaction.Rollback();\r\n " +
                    "                           throw;\r\n                        }\r\n                  " +
                    "  }\r\n                }\r\n            }\r\n        }\r\n\r\n        /// <exception cref=" +
                    "\"SQLiteException\"></exception>\r\n        /// <exception cref=\"ArgumentNullExcepti" +
                    "on\"></exception>\r\n        /// <exception cref=\"ArgumentException\"></exception>\r\n" +
                    "        internal static IList<object> GetSingle(string dataSource, IList<string>" +
                    " sqlString, IList<SQLiteParameter[]> cmdParms)\r\n        {\r\n            if (dataS" +
                    "ource == null)\r\n            {\r\n                throw new ArgumentNullException(\"" +
                    "dataSource\");\r\n            }\r\n\r\n            if (sqlString == null)\r\n            " +
                    "{\r\n                throw new ArgumentNullException(\"sqlString\");\r\n            }\r" +
                    "\n\r\n            if (cmdParms == null)\r\n            {\r\n                throw new A" +
                    "rgumentNullException(\"cmdParms\");\r\n            }\r\n\r\n            if (dataSource.L" +
                    "ength == 0)\r\n            {\r\n                throw new ArgumentException(\"Empty S" +
                    "tring.\", \"dataSource\");\r\n            }\r\n            if (sqlString.Count == 0)\r\n " +
                    "           {\r\n                throw new ArgumentException(\"Empty Collection.\", \"" +
                    "sqlString\");\r\n            }\r\n\r\n            if (cmdParms.Count == 0)\r\n           " +
                    " {\r\n                throw new ArgumentException(\"Empty Collection.\", \"cmdParms\")" +
                    ";\r\n            }\r\n\r\n            var result = new Collection<object>();\r\n        " +
                    "    using (var connection = new SQLiteConnection(dataSource))\r\n            {\r\n  " +
                    "              if (connection.State != ConnectionState.Open)\r\n                {\r\n" +
                    "                    connection.Open();\r\n                }\r\n\r\n                usi" +
                    "ng (var transaction = connection.BeginTransaction())\r\n                {\r\n       " +
                    "             using (var cmd = new SQLiteCommand())\r\n                    {\r\n     " +
                    "                   cmd.Connection = connection;\r\n                        try\r\n  " +
                    "                      {\r\n                            for (var i = 0; i < cmdParm" +
                    "s.Count; i++)\r\n                            {\r\n                                cm" +
                    "d.CommandText = sqlString[i];\r\n                                cmd.Transaction =" +
                    " transaction;\r\n                                cmd.CommandType = CommandType.Tex" +
                    "t;\r\n                                if (cmdParms[i] != null)\r\n                  " +
                    "              {\r\n                                    foreach (var parm in cmdPar" +
                    "ms[i])\r\n                                    {\r\n                                 " +
                    "       cmd.Parameters.Add(parm);\r\n                                    }\r\n       " +
                    "                         }\r\n\r\n                                var obj = cmd.Exec" +
                    "uteScalar();\r\n                                cmd.Parameters.Clear();\r\n         " +
                    "                       result.Add(obj == DBNull.Value ? null : obj);\r\n          " +
                    "                  }\r\n\r\n                            transaction.Commit();\r\n      " +
                    "                      return result;\r\n                        }\r\n               " +
                    "         catch\r\n                        {\r\n                            transacti" +
                    "on.Rollback();\r\n                            throw;\r\n                        }\r\n " +
                    "                   }\r\n                }\r\n            }\r\n        }\r\n\r\n        ///" +
                    " <exception cref=\"SQLiteException\"></exception>\r\n        /// <exception cref=\"Ar" +
                    "gumentNullException\"></exception>\r\n        /// <exception cref=\"ArgumentExceptio" +
                    "n\"></exception>\r\n        internal static DataSet Query(string dataSource, string" +
                    " sqlString, params SQLiteParameter[] cmdParms)\r\n        {\r\n            if (dataS" +
                    "ource == null)\r\n            {\r\n                throw new ArgumentNullException(\"" +
                    "dataSource\");\r\n            }\r\n\r\n            if (sqlString == null)\r\n            " +
                    "{\r\n                throw new ArgumentNullException(\"sqlString\");\r\n            }\r" +
                    "\n\r\n            if (dataSource.Length == 0)\r\n            {\r\n                throw" +
                    " new ArgumentException(\"Empty String.\", \"dataSource\");\r\n            }\r\n\r\n       " +
                    "     if (sqlString.Length == 0)\r\n            {\r\n                throw new Argume" +
                    "ntException(\"Empty String.\", \"sqlString\");\r\n            }\r\n\r\n            using (" +
                    "var connection = new SQLiteConnection(dataSource))\r\n            {\r\n             " +
                    "   var cmd = new SQLiteCommand();\r\n                if (connection.State != Conne" +
                    "ctionState.Open)\r\n                {\r\n                    connection.Open();\r\n   " +
                    "             }\r\n\r\n                cmd.Connection = connection;\r\n                " +
                    "cmd.CommandText = sqlString;\r\n                cmd.CommandType = CommandType.Text" +
                    ";\r\n                if (cmdParms != null)\r\n                {\r\n                   " +
                    " foreach (var parm in cmdParms)\r\n                    {\r\n                        " +
                    "cmd.Parameters.Add(parm);\r\n                    }\r\n                }\r\n\r\n         " +
                    "       using (var adapter = new SQLiteDataAdapter(cmd))\r\n                {\r\n    " +
                    "                var dataSet = new DataSet();\r\n                    adapter.Fill(d" +
                    "ataSet, \"dataSet\");\r\n                    cmd.Parameters.Clear();\r\n              " +
                    "      return dataSet;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class DbHelperSQLiteBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
    }
    #endregion
}
